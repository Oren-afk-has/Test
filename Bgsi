local excluded = {
    ["gift-rift"] = true,
    ["golden-chest"] = true,
    ["royal-chest"] = true,
}

local MultiDropdown = Tabs.Rifts:AddDropdown("MultiDropdown", {
    Title = "Rifts",
    Description = "Select What Rift You Want To Hatch",
    Values = {},
    Multi = true,
    Default = {},
})

local MoveToRiftToggle = Tabs.Rifts:AddToggle("MoveToRiftToggle", {
    Title = "Move To Selected Rift",
    Default = false,
    Callback = function(state)
        if state then
            local selectedRift = MultiDropdown:GetValue()
            if selectedRift and selectedRift[1] then
                local rift = workspace.Rendered.Rifts:FindFirstChild(selectedRift[1])
                if rift and rift:FindFirstChild("Display") then
                    local player = game.Players.LocalPlayer
                    local tweenService = game:GetService("TweenService")
                    local riftDisplay = rift.Display
                    local speed = 750

                    if player.Character then
                        local character = player.Character
                        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
                        local distance = (riftDisplay.Position - humanoidRootPart.Position).Magnitude
                        local duration = distance / speed
                        
                        local tweenInfo = TweenInfo.new(
                            duration,
                            Enum.EasingStyle.Linear,
                            Enum.EasingDirection.InOut,
                            0,
                            false,
                            0
                        )
                        
                        local goal = { CFrame = riftDisplay.CFrame }
                        local tween = tweenService:Create(humanoidRootPart, tweenInfo, goal)
                        
                        tween:Play()
                    end
                end
            end
        end
    end
})

MoveToRiftToggle:Update()

local riftNames = {}
for _, rift in ipairs(workspace.Rendered.Rifts:GetChildren()) do
    if not excluded[rift.Name] then
        table.insert(riftNames, rift.Name)
    end
end

if #riftNames > 0 then
    MultiDropdown:SetValues(riftNames)
else
    MultiDropdown:SetValues({"No rifts available"})
end
