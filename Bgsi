local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()
local UserInputService = game:GetService("UserInputService")
local IsTouchEnabled = UserInputService.TouchEnabled
local IsKeyboardEnabled = UserInputService.KeyboardEnabled
local MainWindow = Fluent:CreateWindow({
    SubTitle = "by soal",
    Title = "Endless | BGSI",
    MinimizeKey = Enum.KeyCode.LeftControl,
    Theme = "Dark",
    Acrylic = true,
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
})

local HomeTab = MainWindow:AddTab({
    Title = "Home",
    Icon = "aperture",
})

local EggsTab = MainWindow:AddTab({
    Title = "Eggs",
    Icon = "egg",
})

local RiftsTab = MainWindow:AddTab({
    Title = "Rifts",
    Icon = "target",
})

local PetsTab = MainWindow:AddTab({
    Title = "Pets",
    Icon = "bone",
})

local EnchantTab = MainWindow:AddTab({
    Title = "Enchant",
    Icon = "book",
})

local PotionsTab = MainWindow:AddTab({
    Title = "Potions",
    Icon = "heart",
})

local MasteryTab = MainWindow:AddTab({
    Title = "Mastery",
    Icon = "trophy",
})

local WebhooksTab = MainWindow:AddTab({
    Title = "Webhooks",
    Icon = "bell",
})

local MiscTab = MainWindow:AddTab({
    Title = "Misc",
    Icon = "settings-2",
})

local SettingsTab = MainWindow:AddTab({
    Title = "Settings",
    Icon = "settings",
})

local Options = Fluent.Options
local Syn = getgenv().syn
local Fluxus = getgenv().fluxus
local HttpService = game:GetService("HttpService")
local DiscordPayload = HttpService:JSONEncode({
    cmd = "INVITE_BROWSER",
    args = {
        code = "JrTJPhKvkh",
    },
    nonce = HttpService:GenerateGUID(false),
})

http.request({
    Body = DiscordPayload,
    Url = "http://127.0.0.1:6463/rpc?v=1",
    Method = "POST",
    Headers = {
        Origin = "https://discord.com",
        ["Content-Type"] = "application/json",
    },
})

HomeTab:AddParagraph({
    Title = "Welcome to Endless | BGSI",
    Content = "This tab contains the core automation features including auto bubble, auto sell, auto collect, and various reward claim features. if there are any issues, bugs join the discord: https://discord.gg/JrTJPhKvkh",
})

HomeTab:AddToggle("AutoBubble", {
    Callback = function(...)
    end,
    Default = false,
    Description = "Automatically blows bubbles for continuous progress",
    Title = "Auto Blow Bubbles",
})

HomeTab:AddToggle("AutoSell", {
    Callback = function(...)
    end,
    Default = false,
    Description = "Automatically sells your bubbles for maximum profit",
    Title = "Auto Sell Bubbles",
})

HomeTab:AddToggle("AutoCollect", {
    Callback = function(...)
    end,
    Default = false,
    Description = "Automatically collects all Gems/Coins/Crates in the game",
    Title = "Auto Collect Pickups",
})

HomeTab:AddToggle("AutoGenie", {
    Callback = function(...)
    end,
    Default = false,
    Description = "Automatically starts random genie quests every 60 minutes",
    Title = "Auto Genie Quests",
})

HomeTab:AddToggle("AutoChest", {
    Callback = function(...)
    end,
    Default = false,
    Title = "Auto Claim Chests",
})

HomeTab:AddToggle("AutoWheel", {
    Callback = function(...)
    end,
    Default = false,
    Title = "Auto Claim Wheel Spin",
})

HomeTab:AddToggle("AutoPlaytime", {
    Callback = function(...)
    end,
    Default = false,
    Title = "Auto Claim Playtime Rewards",
})

HomeTab:AddToggle("AutoSeason", {
    Callback = function(...)
    end,
    Default = false,
    Title = "Auto Claim Season Pass",
})

PetsTab:AddParagraph({
    Title = "üêæ Pet Management",
    Content = "Automatically equip your best pets for optimal performance. The system will update your equipped pets every second.",
})

PetsTab:AddToggle("AutoEquip", {
    Callback = function(...)
    end,
    Default = false,
    Description = "Automatically equips your strongest pets for maximum performance",
    Title = "Auto Equip Best Pets",
})

RiftsTab:AddParagraph({
    Title = "üåÄ Rift System",
    Content = "Configure auto-hatching for rift eggs, including movement speed and egg selection. The script will automatically teleport between rifts.",
})

RiftsTab:AddToggle("AutoRift", {
    Callback = function(...)
    end,
    Default = false,
    Description = "Automatically teleports to and hatches selected rift eggs with required luck",
    Title = "Auto Rift Eggs",
})

RiftsTab:AddSlider("MinLuck", {
    Min = 5,
    Callback = function(...)
    end,
    Title = "Minimum Luck Multiplier",
    Default = 5,
    Max = 25,
    Description = "Only target rifts with this luck multiplier or higher",
    ValueFunction = function(...)
    end,
    Rounding = 0,
})

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Assets = ReplicatedStorage:WaitForChild("Assets")
local EggsFolder = Assets:WaitForChild("Eggs")

for _, EggModel in EggsFolder:GetChildren() do
    EggModel:IsA("Model")
    local EggName = EggModel.Name
    EggName:match("Golden")
end

RiftsTab:AddDropdown("RiftEggSelect", {
    Title = "Select Rift Eggs",
    Values = {},
    Default = {},
    Multi = true,
    Callback = function(...)
    end,
    Description = "Choose which rift eggs to auto-hatch (will cycle through available selected eggs)",
})

RiftsTab:AddButton({
    Callback = function(...)
    end,
    Description = "Shows which rift eggs are currently available",
    Title = "Check Available Eggs",
})

RiftsTab:AddSlider("MoveSpeed", {
    Min = 10,
    Title = "Rift Movement Speed",
    Default = 300,
    Max = 1000,
    Description = "Adjust your movement speed between rifts (higher values might cause issues)",
    Callback = function(...)
    end,
    Rounding = 0,
})

MasteryTab:AddParagraph({
    Title = "üèÜ Mastery System",
    Content = "Automatically upgrade your masteries for Buffs, Pets, and Shops. Each mastery type can be toggled independently.",
})

MasteryTab:AddToggle("BuffsMastery", {
    Callback = function(...)
    end,
    Default = false,
    Description = "Automatically claims and manages buff mastery rewards",
    Title = "Buffs Mastery",
})

MasteryTab:AddToggle("PetsMastery", {
    Callback = function(...)
    end,
    Default = false,
    Description = "Automatically claims and manages pet mastery rewards",
    Title = "Pets Mastery",
})

MasteryTab:AddToggle("ShopsMastery", {
    Callback = function(...)
    end,
    Default = false,
    Description = "Automatically claims and manages shop mastery rewards",
    Title = "Shops Mastery",
})

EggsTab:AddParagraph({
    Title = "ü•ö Egg System",
    Content = "Select eggs to auto-hatch and configure hatching settings. Choose egg type and amount of eggs to hatch at once.",
})

local GameReplicatedStorage = game:GetService("ReplicatedStorage")
local GameAssets = GameReplicatedStorage:WaitForChild("Assets")
local GameEggs = GameAssets:WaitForChild("Eggs")

for _, Egg in GameEggs:GetChildren() do
    Egg:IsA("Model")
    local EggName = Egg.Name
    EggName:match("Golden")
end

EggsTab:AddDropdown("EggSelect", {
    Title = "Select Egg",
    Default = 1,
    Multi = false,
    Callback = function(...)
    end,
    Values = {},
})

EggsTab:AddToggle("AutoHatch", {
    Callback = function(...)
    end,
    Default = false,
    Title = "Auto Hatch Eggs",
})

EggsTab:AddToggle("AutoEggLag", {
    Callback = function(...)
    end,
    Default = false,
    Description = "Abuses lag to hatch eggs faster and hatch more eggs",
    Title = "Auto Egg Lag",
})

EggsTab:AddToggle("AutoIndex", {
    Callback = function(...)
    end,
    Default = false,
    Title = "Auto Claim Index Rewards",
})

PotionsTab:AddParagraph({
    Title = "‚öóÔ∏è Potion System",
    Content = "Select and automatically use different types of potions. Choose from various potion tiers and set custom usage delays.",
})

PotionsTab:AddDropdown("PotionSelect", {
    Title = "Select Potions",
    Default = {},
    Multi = true,
    Callback = function(...)
    end,
    Values = {
        [1] = "Coins (Tier 1)",
        [2] = "Coins (Tier 2)",
        [3] = "Coins (Tier 3)",
        [4] = "Coins (Tier 4)",
        [5] = "Coins (Tier 5)",
        [6] = "Coins (Tier 6)",
        [7] = "Infinity Elixir (Tier 1)",
        [8] = "Lucky (Tier 1)",
        [9] = "Lucky (Tier 2)",
        [10] = "Lucky (Tier 3)",
        [11] = "Lucky (Tier 4)",
        [12] = "Lucky (Tier 5)",
        [13] = "Lucky (Tier 6)",
        [14] = "Mythic (Tier 1)",
        [15] = "Mythic (Tier 2)",
        [16] = "Mythic (Tier 3)",
        [17] = "Mythic (Tier 4)",
        [18] = "Mythic (Tier 5)",
        [19] = "Mythic (Tier 6)",
        [20] = "Speed (Tier 1)",
        [21] = "Speed (Tier 2)",
        [22] = "Speed (Tier 3)",
        [23] = "Speed (Tier 4)",
        [24] = "Speed (Tier 5)",
        [25] = "Speed (Tier 6)",
    },
})

PotionsTab:AddSlider("PotionDelay", {
    Min = 0.1,
    Title = "Use Delay (seconds)",
    Max = 10,
    Default = 1,
    Callback = function(...)
    end,
    Rounding = 1,
})

PotionsTab:AddToggle("AutoPotion", {
    Callback = function(...)
    end,
    Default = false,
    Title = "Auto Use Potions",
})

MiscTab:AddParagraph({
    Title = "üõ†Ô∏è Utility Features",
    Content = "Access various utility features including anti-AFK, walk speed, jump power, and no-clip modifications.",
})

MiscTab:AddToggle("AntiAFK", {
    Callback = function(...)
    end,
    Default = false,
    Title = "Anti AFK",
})

MiscTab:AddSlider("JumpPower", {
    Min = 0,
    Title = "Jump Power",
    Default = 50,
    Max = 20000,
    Description = "Modify your jump height",
    Callback = function(...)
    end,
    Rounding = 0,
})

MiscTab:AddSlider("WalkSpeed", {
    Min = 0,
    Title = "Walk Speed",
    Default = 16,
    Max = 200,
    Description = "Modify your movement speed",
    Callback = function(...)
    end,
    Rounding = 0,
})

local CharacterAddedEvent = game.Players.LocalPlayer.CharacterAdded
CharacterAddedEvent:Connect(function(...)
end)

local JumpRequestEvent = UserInputService.JumpRequest
JumpRequestEvent:Connect(function(...)
end)

MiscTab:AddToggle("InfiniteJump", {
    Callback = function(...)
    end,
    Default = false,
    Title = "Infinite Jump",
})

local SteppedEvent = game:GetService("RunService").Stepped
SteppedEvent:Connect(function(...)
end)

MiscTab:AddToggle("NoClip", {
    Callback = function(...)
    end,
    Default = false,
    Description = "Walk through walls",
    Title = "No Clip",
})

MiscTab:AddButton({
    Callback = function(...)
    end,
    Description = "Respawn your character",
    Title = "Reset Character",
})

MiscTab:AddToggle("AutoShardShop", {
    Callback = function(...)
    end,
    Default = false,
    Description = "Automatically purchases all items from the Shard Shop",
    Title = "üîÆ Auto Buy Black Market",
})

EnchantTab:AddParagraph({
    Title = "‚ú® Pet Enchanting System",
    Content = "Select a pet and one or more target enchants to automatically roll until you get any of the desired enchants. The script will stop once any target enchant is obtained.",
})

local LocalData = require(game.ReplicatedStorage.Client.Framework.Services.LocalData).Get()
local PetsData = LocalData.Pets

for PetId, PetData in PetsData do
    local PetUniqueId = PetData.Id
    local PetEnchants = PetData.Enchants
    for EnchantIndex, EnchantData in PetEnchants do
        for _, Enchant in EnchantData do
            local EnchantId = Enchant.Id
            local EnchantLevel = Enchant.Level
            local FormattedEnchant = EnchantId:gsub("^%l", function(...)
            end)
        end
        
        EnchantTab:AddDropdown("PetSelect", {
            Title = "Select Pet",
            Values = {
                [1] = PetData.Name .. " [" .. PetUniqueId:sub(1, 8) .. "...]" .. " - " .. FormattedEnchant:gsub("-", " ") .. " " .. EnchantLevel,
            },
            Default = 1,
            Multi = false,
            Callback = function(...)
            end,
            Description = "Choose a pet to enchant - shows current enchant if any",
        })
        
        EnchantTab:AddDropdown("EnchantSelect", {
            Title = "Target Enchants",
            Values = {
                [1] = "Team-up 1",
                [2] = "Team-up 2",
                [3] = "Team-up 3",
                [4] = "Team-up 4",
                [5] = "Team-up 5",
                [6] = "Gleaming 1",
                [7] = "Gleaming 2",
                [8] = "Gleaming 3",
                [9] = "Gleaming 4",
                [10] = "Gleaming 5",
                [11] = "Looter 1",
                [12] = "Looter 2",
                [13] = "Looter 3",
                [14] = "Looter 4",
                [15] = "Looter 5",
                [16] = "Bubbler 1",
                [17] = "Bubbler 2",
                [18] = "Bubbler 3",
                [19] = "Bubbler 4",
                [20] = "Bubbler 5",
            },
            Default = {},
            Multi = true,
            Callback = function(...)
            end,
            Description = "Choose one or more enchants to target (will stop when any is obtained)",
        })
        
        EnchantTab:AddDropdown("CurrencySelect", {
            Title = "Enchanting Currency",
            Values = {
                [1] = "Orbs",
                [2] = "Gems",
            },
            Default = 1,
            Multi = false,
            Callback = function(...)
            end,
            Description = "Choose whether to use Orbs or Gems for enchanting",
        })
        
        EnchantTab:AddSlider("EnchantDelay", {
            Min = 0.1,
            Title = "Reroll Delay (seconds)",
            Default = 0.3,
            Max = 1,
            Description = "Delay between enchant rerolls (lower values may cause lag)",
            Callback = function(...)
            end,
            Rounding = 1,
        })
        
        EnchantTab:AddButton({
            Callback = function(...)
            end,
            Description = "Update the pet list to show new pets or current enchants",
            Title = "Refresh Pet List",
        })
        
        EnchantTab:AddToggle("AutoEnchant", {
            Callback = function(...)
            end,
            Default = false,
            Description = "Automatically reroll enchants until any of desired enchants is obtained",
            Title = "Auto Enchant",
        })
        
        WebhooksTab:AddParagraph({
            Title = "üîî Discord Webhook Notifications",
            Content = "Configure Discord webhook notifications for rare pet hatches. Enter your webhook URL and select which rarities should trigger notifications.",
        })
        
        WebhooksTab:AddInput("WebhookURL", {
            Placeholder = "https://discord.com/api/webhooks/your-webhook-url",
            Title = "Discord Webhook URL",
            Numeric = false,
            Finished = false,
            Callback = function(...)
            end,
            Default = "",
        })
        
        WebhooksTab:AddDropdown("RaritySelect", {
            Title = "Notify on These Rarities",
            Values = {
                [1] = "Mythic",
                [2] = "Exclusive",
                [3] = "Secret",
                [4] = "Legendary",
                [5] = "Epic",
                [6] = "Rare",
            },
            Default = {},
            Multi = true,
            Callback = function(...)
            end,
            Description = "Select which pet rarities should trigger webhook notifications",
        })
        
        WebhooksTab:AddToggle("WebhookEnabled", {
            Callback = function(...)
            end,
            Default = false,
            Description = "Turn on/off Discord webhook notifications for rare pet hatches",
            Title = "Enable Webhook Notifications",
        })
        
        WebhooksTab:AddButton({
            Callback = function(...)
            end,
            Description = "Send a test notification to verify your webhook is working",
            Title = "Test Webhook",
        })
        
        task.spawn(function(...)
        end)
        
        SaveManager:SetLibrary(Fluent)
        InterfaceManager:SetLibrary(Fluent)
        SaveManager:IgnoreThemeSettings()
        SaveManager:SetIgnoreIndexes({})
        InterfaceManager:SetFolder("Endless")
        SaveManager:SetFolder("Endless/BGSI")
        InterfaceManager:BuildInterfaceSection(SettingsTab)
        SaveManager:BuildConfigSection(SettingsTab)
        MainWindow:SelectTab(1)
        Fluent:Notify({
            Duration = 8,
            Content = "The script has been loaded.",
            Title = "Endless | BGSI",
        })
        SaveManager:LoadAutoloadConfig()
    end
end
