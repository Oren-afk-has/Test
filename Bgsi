--Source
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

--Window
local Window = Fluent:CreateWindow({
    Title = "Fluent " .. Fluent.Version,
    SubTitle = "By Oren",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = false,
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl
})

--Tabs
local Tabs = {
    Home = Window:AddTab({ Title = "Home", Icon = "" }),
    Farming = Window:AddTab({ Title = "Farming", Icon = "" }),
    Hatching = Window:AddTab({ Title = "Hatching", Icon = "" }),
    Pets = Window:AddTab({ Title = "Pets", Icon = "" }),
    Rifts = Window:AddTab({ Title = "Rifts", Icon = "" }),
    Quests = Window:AddTab({ Title = "Quests", Icon = "" }),
    Merchant = Window:AddTab({ Title = "Merchants", Icon = "" }),
    Potions = Window:AddTab({ Title = "Potions", Icon = "" }),
    Teleport = Window:AddTab({ Title = "Teleport", Icon = "" }),
    Others = Window:AddTab({ Title = "Others", Icon = "" }),
    Settings = Window:AddTab({ Title = "Config", Icon = "" }),
}

--Credits
local Section = Tabs.Home:AddSection("Credits")
Section:AddParagraph({
    Title = "This Script Is A Work In Progess I Dunno If This Will Ever Be \nRealeased"
})

-- Farming
local Section = Tabs.Farming:AddSection("Blowing")
local Toggle = Tabs.Farming:AddToggle("Blow", 
{
    Title = "Auto Blow Bubbles", 
    Description = "Automatically Blows Bubbles For You",
    Default = false,
    Callback = function(state)
        if state then
            while state do
                local args = {
                    [1] = "BlowBubble"
                }
                game:GetService("ReplicatedStorage"):WaitForChild("Shared"):WaitForChild("Framework"):WaitForChild("Network"):WaitForChild("Remote"):WaitForChild("Event"):FireServer(unpack(args))
                task.wait()
            end
        end
    end
})

local TweenService = game:GetService("TweenService")

-- Dropdown for selecting rifts
local MultiDropdown = Tabs.Rifts:AddDropdown("MultiDropdown", {
    Title = "Rifts",
    Description = "Select What Rift You Want To Hatch",
    Values = {},  -- You'll populate this with rift names later
    Multi = true,
    Default = {},
})

-- Populate the dropdown with available rifts
local riftNames = {}
for _, rift in ipairs(workspace.Rendered.Rifts:GetChildren()) do
    if not excluded[rift.Name] then
        table.insert(riftNames, rift.Name)
    end
end
MultiDropdown:SetValues(riftNames)

-- Toggle for moving to selected rift
local Toggle = Tabs.Rifts:AddToggle("Rift", 
{
    Title = "Toggle", 
    Description = "Toggle description",
    Default = false,
    Callback = function(state)
        if state then
            print("Toggle On")
            -- Get selected rifts from the dropdown
            local selectedRifts = MultiDropdown:GetValue()

            -- Iterate over each selected rift
            for _, riftName in ipairs(selectedRifts) do
                -- Find the rift with the given name
                local rift = workspace.Rendered.Rifts:FindFirstChild(riftName)
                if rift and not excluded[rift.Name] then
                    local display = rift:FindFirstChild("Display")
                    if display and display:IsA("BasePart") then
                        -- Get the position of the Display part
                        local targetPosition = display.Position

                        -- Get the player's character
                        local character = game.Players.LocalPlayer.Character
                        if character then
                            local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

                            -- Create a Tween for smooth movement to the target position
                            local tweenInfo = TweenInfo.new(2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                            local goal = {Position = targetPosition}
                            local tween = TweenService:Create(humanoidRootPart, tweenInfo, goal)

                            -- Play the tween to move the player
                            tween:Play()
                        end
                    else
                        print(rift.Name .. " does not have a valid Display part.")
                    end
                end
            end
        else
            print("Toggle Off")
        end
    end
})

--Config Saving
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)
